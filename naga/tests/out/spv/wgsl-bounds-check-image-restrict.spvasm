; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 204
OpCapability Shader
OpCapability Sampled1D
OpCapability Image1D
OpCapability ImageQuery
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint Fragment %174 "fragment_shader" %172
OpExecutionMode %174 OriginUpperLeft
%3 = OpString "bounds-check-image-restrict.wgsl"
OpSource Unknown 0 %3 "@group(0) @binding(0)
var image_1d: texture_1d<f32>;

fn test_textureLoad_1d(coords: i32, level: i32) -> vec4<f32> {
   return textureLoad(image_1d, coords, level);
}

@group(0) @binding(1)
var image_2d: texture_2d<f32>;

fn test_textureLoad_2d(coords: vec2<i32>, level: i32) -> vec4<f32> {
   return textureLoad(image_2d, coords, level);
}

@group(0) @binding(2)
var image_2d_array: texture_2d_array<f32>;

fn test_textureLoad_2d_array_u(coords: vec2<i32>, index: u32, level: i32) -> vec4<f32> {
   return textureLoad(image_2d_array, coords, index, level);
}

fn test_textureLoad_2d_array_s(coords: vec2<i32>, index: i32, level: i32) -> vec4<f32> {
   return textureLoad(image_2d_array, coords, index, level);
}

@group(0) @binding(3)
var image_3d: texture_3d<f32>;

fn test_textureLoad_3d(coords: vec3<i32>, level: i32) -> vec4<f32> {
   return textureLoad(image_3d, coords, level);
}

@group(0) @binding(4)
var image_multisampled_2d: texture_multisampled_2d<f32>;

fn test_textureLoad_multisampled_2d(coords: vec2<i32>, _sample: i32) -> vec4<f32> {
   return textureLoad(image_multisampled_2d, coords, _sample);
}

@group(0) @binding(5)
var image_storage_1d: texture_storage_1d<rgba8unorm, write>;

fn test_textureStore_1d(coords: i32, value: vec4<f32>) {
    textureStore(image_storage_1d, coords, value);
}

@group(0) @binding(6)
var image_storage_2d: texture_storage_2d<rgba8unorm, write>;

fn test_textureStore_2d(coords: vec2<i32>, value: vec4<f32>) {
    textureStore(image_storage_2d, coords, value);
}

@group(0) @binding(7)
var image_storage_2d_array: texture_storage_2d_array<rgba8unorm, write>;

fn test_textureStore_2d_array_u(coords: vec2<i32>, array_index: u32, value: vec4<f32>) {
 textureStore(image_storage_2d_array, coords, array_index, value);
}

fn test_textureStore_2d_array_s(coords: vec2<i32>, array_index: i32, value: vec4<f32>) {
 textureStore(image_storage_2d_array, coords, array_index, value);
}

@group(0) @binding(8)
var image_storage_3d: texture_storage_3d<rgba8unorm, write>;

fn test_textureStore_3d(coords: vec3<i32>, value: vec4<f32>) {
    textureStore(image_storage_3d, coords, value);
}

// GLSL output requires that we identify an entry point, so
// that it can tell what \"in\" and \"out\" globals to write.
@fragment
fn fragment_shader() -> @location(0) vec4<f32> {
    test_textureLoad_1d(0, 0);
    test_textureLoad_2d(vec2<i32>(), 0);
    test_textureLoad_2d_array_u(vec2<i32>(), 0u, 0);
    test_textureLoad_2d_array_s(vec2<i32>(), 0, 0);
    test_textureLoad_3d(vec3<i32>(), 0);
    test_textureLoad_multisampled_2d(vec2<i32>(), 0);
    test_textureStore_1d(0, vec4<f32>());
    test_textureStore_2d(vec2<i32>(), vec4<f32>());
    test_textureStore_2d_array_u(vec2<i32>(), 0u, vec4<f32>());
    test_textureStore_2d_array_s(vec2<i32>(), 0, vec4<f32>());
    test_textureStore_3d(vec3<i32>(), vec4<f32>());

    return vec4<f32>(0.,0.,0.,0.);
}
"
OpName %19 "image_1d"
OpName %21 "image_2d"
OpName %23 "image_2d_array"
OpName %25 "image_3d"
OpName %27 "image_multisampled_2d"
OpName %29 "image_storage_1d"
OpName %31 "image_storage_2d"
OpName %33 "image_storage_2d_array"
OpName %35 "image_storage_3d"
OpName %38 "coords"
OpName %39 "level"
OpName %40 "test_textureLoad_1d"
OpName %53 "coords"
OpName %54 "level"
OpName %55 "test_textureLoad_2d"
OpName %68 "coords"
OpName %69 "index"
OpName %70 "level"
OpName %71 "test_textureLoad_2d_array_u"
OpName %86 "coords"
OpName %87 "index"
OpName %88 "level"
OpName %89 "test_textureLoad_2d_array_s"
OpName %103 "coords"
OpName %104 "level"
OpName %105 "test_textureLoad_3d"
OpName %118 "coords"
OpName %119 "_sample"
OpName %120 "test_textureLoad_multisampled_2d"
OpName %132 "coords"
OpName %133 "value"
OpName %134 "test_textureStore_1d"
OpName %139 "coords"
OpName %140 "value"
OpName %141 "test_textureStore_2d"
OpName %146 "coords"
OpName %147 "array_index"
OpName %148 "value"
OpName %149 "test_textureStore_2d_array_u"
OpName %156 "coords"
OpName %157 "array_index"
OpName %158 "value"
OpName %159 "test_textureStore_2d_array_s"
OpName %165 "coords"
OpName %166 "value"
OpName %167 "test_textureStore_3d"
OpName %174 "fragment_shader"
OpDecorate %19 DescriptorSet 0
OpDecorate %19 Binding 0
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 1
OpDecorate %23 DescriptorSet 0
OpDecorate %23 Binding 2
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 3
OpDecorate %27 DescriptorSet 0
OpDecorate %27 Binding 4
OpDecorate %29 NonReadable
OpDecorate %29 DescriptorSet 0
OpDecorate %29 Binding 5
OpDecorate %31 NonReadable
OpDecorate %31 DescriptorSet 0
OpDecorate %31 Binding 6
OpDecorate %33 NonReadable
OpDecorate %33 DescriptorSet 0
OpDecorate %33 Binding 7
OpDecorate %35 NonReadable
OpDecorate %35 DescriptorSet 0
OpDecorate %35 Binding 8
OpDecorate %172 Location 0
%2 = OpTypeVoid
%5 = OpTypeFloat 32
%4 = OpTypeImage %5 1D 0 0 0 1 Unknown
%6 = OpTypeInt 32 1
%7 = OpTypeVector %5 4
%8 = OpTypeImage %5 2D 0 0 0 1 Unknown
%9 = OpTypeVector %6 2
%10 = OpTypeImage %5 2D 0 1 0 1 Unknown
%11 = OpTypeInt 32 0
%12 = OpTypeImage %5 3D 0 0 0 1 Unknown
%13 = OpTypeVector %6 3
%14 = OpTypeImage %5 2D 0 0 1 1 Unknown
%15 = OpTypeImage %5 1D 0 0 0 2 Rgba8
%16 = OpTypeImage %5 2D 0 0 0 2 Rgba8
%17 = OpTypeImage %5 2D 0 1 0 2 Rgba8
%18 = OpTypeImage %5 3D 0 0 0 2 Rgba8
%20 = OpTypePointer UniformConstant %4
%19 = OpVariable  %20  UniformConstant
%22 = OpTypePointer UniformConstant %8
%21 = OpVariable  %22  UniformConstant
%24 = OpTypePointer UniformConstant %10
%23 = OpVariable  %24  UniformConstant
%26 = OpTypePointer UniformConstant %12
%25 = OpVariable  %26  UniformConstant
%28 = OpTypePointer UniformConstant %14
%27 = OpVariable  %28  UniformConstant
%30 = OpTypePointer UniformConstant %15
%29 = OpVariable  %30  UniformConstant
%32 = OpTypePointer UniformConstant %16
%31 = OpVariable  %32  UniformConstant
%34 = OpTypePointer UniformConstant %17
%33 = OpVariable  %34  UniformConstant
%36 = OpTypePointer UniformConstant %18
%35 = OpVariable  %36  UniformConstant
%41 = OpTypeFunction %7 %6 %6
%45 = OpConstant  %6  1
%56 = OpTypeFunction %7 %9 %6
%63 = OpConstantComposite  %9  %45 %45
%72 = OpTypeFunction %7 %9 %11 %6
%81 = OpConstantComposite  %13  %45 %45 %45
%90 = OpTypeFunction %7 %9 %6 %6
%98 = OpConstantComposite  %13  %45 %45 %45
%106 = OpTypeFunction %7 %13 %6
%113 = OpConstantComposite  %13  %45 %45 %45
%127 = OpConstantComposite  %9  %45 %45
%135 = OpTypeFunction %2 %6 %7
%142 = OpTypeFunction %2 %9 %7
%150 = OpTypeFunction %2 %9 %11 %7
%160 = OpTypeFunction %2 %9 %6 %7
%168 = OpTypeFunction %2 %13 %7
%173 = OpTypePointer Output %7
%172 = OpVariable  %173  Output
%175 = OpTypeFunction %2
%185 = OpConstant  %6  0
%186 = OpConstantNull  %9
%187 = OpConstant  %11  0
%188 = OpConstantNull  %13
%189 = OpConstantNull  %7
%190 = OpConstant  %5  0
%191 = OpConstantComposite  %7  %190 %190 %190 %190
%40 = OpFunction  %7  None %41
%38 = OpFunctionParameter  %6
%39 = OpFunctionParameter  %6
%37 = OpLabel
%42 = OpLoad  %4  %19
OpBranch %43
%43 = OpLabel
OpLine %3 5 11
%44 = OpImageQueryLevels  %6  %42
%46 = OpISub  %6  %44 %45
%47 = OpExtInst  %6  %1 UMin %39 %46
%48 = OpImageQuerySizeLod  %6  %42 %47
%49 = OpISub  %6  %48 %45
%50 = OpExtInst  %6  %1 UMin %38 %49
%51 = OpImageFetch  %7  %42 %50 Lod %47
OpReturnValue %51
OpFunctionEnd
%55 = OpFunction  %7  None %56
%53 = OpFunctionParameter  %9
%54 = OpFunctionParameter  %6
%52 = OpLabel
%57 = OpLoad  %8  %21
OpBranch %58
%58 = OpLabel
OpLine %3 12 11
%59 = OpImageQueryLevels  %6  %57
%60 = OpISub  %6  %59 %45
%61 = OpExtInst  %6  %1 UMin %54 %60
%62 = OpImageQuerySizeLod  %9  %57 %61
%64 = OpISub  %9  %62 %63
%65 = OpExtInst  %9  %1 UMin %53 %64
%66 = OpImageFetch  %7  %57 %65 Lod %61
OpReturnValue %66
OpFunctionEnd
%71 = OpFunction  %7  None %72
%68 = OpFunctionParameter  %9
%69 = OpFunctionParameter  %11
%70 = OpFunctionParameter  %6
%67 = OpLabel
%73 = OpLoad  %10  %23
OpBranch %74
%74 = OpLabel
OpLine %3 19 11
%75 = OpBitcast  %6  %69
%76 = OpCompositeConstruct  %13  %68 %75
%77 = OpImageQueryLevels  %6  %73
%78 = OpISub  %6  %77 %45
%79 = OpExtInst  %6  %1 UMin %70 %78
%80 = OpImageQuerySizeLod  %13  %73 %79
%82 = OpISub  %13  %80 %81
%83 = OpExtInst  %13  %1 UMin %76 %82
%84 = OpImageFetch  %7  %73 %83 Lod %79
OpReturnValue %84
OpFunctionEnd
%89 = OpFunction  %7  None %90
%86 = OpFunctionParameter  %9
%87 = OpFunctionParameter  %6
%88 = OpFunctionParameter  %6
%85 = OpLabel
%91 = OpLoad  %10  %23
OpBranch %92
%92 = OpLabel
OpLine %3 23 11
%93 = OpCompositeConstruct  %13  %86 %87
%94 = OpImageQueryLevels  %6  %91
%95 = OpISub  %6  %94 %45
%96 = OpExtInst  %6  %1 UMin %88 %95
%97 = OpImageQuerySizeLod  %13  %91 %96
%99 = OpISub  %13  %97 %98
%100 = OpExtInst  %13  %1 UMin %93 %99
%101 = OpImageFetch  %7  %91 %100 Lod %96
OpReturnValue %101
OpFunctionEnd
%105 = OpFunction  %7  None %106
%103 = OpFunctionParameter  %13
%104 = OpFunctionParameter  %6
%102 = OpLabel
%107 = OpLoad  %12  %25
OpBranch %108
%108 = OpLabel
OpLine %3 30 11
%109 = OpImageQueryLevels  %6  %107
%110 = OpISub  %6  %109 %45
%111 = OpExtInst  %6  %1 UMin %104 %110
%112 = OpImageQuerySizeLod  %13  %107 %111
%114 = OpISub  %13  %112 %113
%115 = OpExtInst  %13  %1 UMin %103 %114
%116 = OpImageFetch  %7  %107 %115 Lod %111
OpReturnValue %116
OpFunctionEnd
%120 = OpFunction  %7  None %56
%118 = OpFunctionParameter  %9
%119 = OpFunctionParameter  %6
%117 = OpLabel
%121 = OpLoad  %14  %27
OpBranch %122
%122 = OpLabel
OpLine %3 37 11
%123 = OpImageQuerySamples  %6  %121
%124 = OpISub  %6  %123 %45
%125 = OpExtInst  %6  %1 UMin %119 %124
%126 = OpImageQuerySize  %9  %121
%128 = OpISub  %9  %126 %127
%129 = OpExtInst  %9  %1 UMin %118 %128
%130 = OpImageFetch  %7  %121 %129 Sample %125
OpReturnValue %130
OpFunctionEnd
%134 = OpFunction  %2  None %135
%132 = OpFunctionParameter  %6
%133 = OpFunctionParameter  %7
%131 = OpLabel
%136 = OpLoad  %15  %29
OpBranch %137
%137 = OpLabel
OpLine %3 44 5
OpImageWrite %136 %132 %133
OpReturn
OpFunctionEnd
%141 = OpFunction  %2  None %142
%139 = OpFunctionParameter  %9
%140 = OpFunctionParameter  %7
%138 = OpLabel
%143 = OpLoad  %16  %31
OpBranch %144
%144 = OpLabel
OpLine %3 51 5
OpImageWrite %143 %139 %140
OpReturn
OpFunctionEnd
%149 = OpFunction  %2  None %150
%146 = OpFunctionParameter  %9
%147 = OpFunctionParameter  %11
%148 = OpFunctionParameter  %7
%145 = OpLabel
%151 = OpLoad  %17  %33
OpBranch %152
%152 = OpLabel
OpLine %3 58 2
%153 = OpBitcast  %6  %147
%154 = OpCompositeConstruct  %13  %146 %153
OpImageWrite %151 %154 %148
OpReturn
OpFunctionEnd
%159 = OpFunction  %2  None %160
%156 = OpFunctionParameter  %9
%157 = OpFunctionParameter  %6
%158 = OpFunctionParameter  %7
%155 = OpLabel
%161 = OpLoad  %17  %33
OpBranch %162
%162 = OpLabel
OpLine %3 62 2
%163 = OpCompositeConstruct  %13  %156 %157
OpImageWrite %161 %163 %158
OpReturn
OpFunctionEnd
%167 = OpFunction  %2  None %168
%165 = OpFunctionParameter  %13
%166 = OpFunctionParameter  %7
%164 = OpLabel
%169 = OpLoad  %18  %35
OpBranch %170
%170 = OpLabel
OpLine %3 69 5
OpImageWrite %169 %165 %166
OpReturn
OpFunctionEnd
%174 = OpFunction  %2  None %175
%171 = OpLabel
%176 = OpLoad  %4  %19
%177 = OpLoad  %8  %21
%178 = OpLoad  %10  %23
%179 = OpLoad  %12  %25
%180 = OpLoad  %14  %27
%181 = OpLoad  %15  %29
%182 = OpLoad  %16  %31
%183 = OpLoad  %17  %33
%184 = OpLoad  %18  %35
OpBranch %192
%192 = OpLabel
OpLine %3 76 5
%193 = OpFunctionCall  %7  %40 %185 %185
OpLine %3 77 5
%194 = OpFunctionCall  %7  %55 %186 %185
OpLine %3 78 5
%195 = OpFunctionCall  %7  %71 %186 %187 %185
OpLine %3 79 5
%196 = OpFunctionCall  %7  %89 %186 %185 %185
OpLine %3 80 5
%197 = OpFunctionCall  %7  %105 %188 %185
OpLine %3 81 5
%198 = OpFunctionCall  %7  %120 %186 %185
OpLine %3 82 5
%199 = OpFunctionCall  %2  %134 %185 %189
OpLine %3 83 5
%200 = OpFunctionCall  %2  %141 %186 %189
OpLine %3 84 5
%201 = OpFunctionCall  %2  %149 %186 %187 %189
OpLine %3 85 5
%202 = OpFunctionCall  %2  %159 %186 %185 %189
OpLine %3 86 5
%203 = OpFunctionCall  %2  %167 %188 %189
OpLine %3 88 12
OpStore %172 %191
OpReturn
OpFunctionEnd