; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 218
OpCapability Shader
OpCapability Sampled1D
OpCapability Image1D
OpCapability ImageQuery
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint Fragment %189 "fragment_shader" %187
OpExecutionMode %189 OriginUpperLeft
%3 = OpString "bounds-check-image-rzsw.wgsl"
OpSource Unknown 0 %3 "@group(0) @binding(0)
var image_1d: texture_1d<f32>;

fn test_textureLoad_1d(coords: i32, level: i32) -> vec4<f32> {
   return textureLoad(image_1d, coords, level);
}

@group(0) @binding(1)
var image_2d: texture_2d<f32>;

fn test_textureLoad_2d(coords: vec2<i32>, level: i32) -> vec4<f32> {
   return textureLoad(image_2d, coords, level);
}

@group(0) @binding(2)
var image_2d_array: texture_2d_array<f32>;

fn test_textureLoad_2d_array_u(coords: vec2<i32>, index: u32, level: i32) -> vec4<f32> {
   return textureLoad(image_2d_array, coords, index, level);
}

fn test_textureLoad_2d_array_s(coords: vec2<i32>, index: i32, level: i32) -> vec4<f32> {
   return textureLoad(image_2d_array, coords, index, level);
}

@group(0) @binding(3)
var image_3d: texture_3d<f32>;

fn test_textureLoad_3d(coords: vec3<i32>, level: i32) -> vec4<f32> {
   return textureLoad(image_3d, coords, level);
}

@group(0) @binding(4)
var image_multisampled_2d: texture_multisampled_2d<f32>;

fn test_textureLoad_multisampled_2d(coords: vec2<i32>, _sample: i32) -> vec4<f32> {
   return textureLoad(image_multisampled_2d, coords, _sample);
}

@group(0) @binding(5)
var image_storage_1d: texture_storage_1d<rgba8unorm, write>;

fn test_textureStore_1d(coords: i32, value: vec4<f32>) {
    textureStore(image_storage_1d, coords, value);
}

@group(0) @binding(6)
var image_storage_2d: texture_storage_2d<rgba8unorm, write>;

fn test_textureStore_2d(coords: vec2<i32>, value: vec4<f32>) {
    textureStore(image_storage_2d, coords, value);
}

@group(0) @binding(7)
var image_storage_2d_array: texture_storage_2d_array<rgba8unorm, write>;

fn test_textureStore_2d_array_u(coords: vec2<i32>, array_index: u32, value: vec4<f32>) {
 textureStore(image_storage_2d_array, coords, array_index, value);
}

fn test_textureStore_2d_array_s(coords: vec2<i32>, array_index: i32, value: vec4<f32>) {
 textureStore(image_storage_2d_array, coords, array_index, value);
}

@group(0) @binding(8)
var image_storage_3d: texture_storage_3d<rgba8unorm, write>;

fn test_textureStore_3d(coords: vec3<i32>, value: vec4<f32>) {
    textureStore(image_storage_3d, coords, value);
}

// GLSL output requires that we identify an entry point, so
// that it can tell what \"in\" and \"out\" globals to write.
@fragment
fn fragment_shader() -> @location(0) vec4<f32> {
    test_textureLoad_1d(0, 0);
    test_textureLoad_2d(vec2<i32>(), 0);
    test_textureLoad_2d_array_u(vec2<i32>(), 0u, 0);
    test_textureLoad_2d_array_s(vec2<i32>(), 0, 0);
    test_textureLoad_3d(vec3<i32>(), 0);
    test_textureLoad_multisampled_2d(vec2<i32>(), 0);
    test_textureStore_1d(0, vec4<f32>());
    test_textureStore_2d(vec2<i32>(), vec4<f32>());
    test_textureStore_2d_array_u(vec2<i32>(), 0u, vec4<f32>());
    test_textureStore_2d_array_s(vec2<i32>(), 0, vec4<f32>());
    test_textureStore_3d(vec3<i32>(), vec4<f32>());

    return vec4<f32>(0.,0.,0.,0.);
}
"
OpName %19 "image_1d"
OpName %21 "image_2d"
OpName %23 "image_2d_array"
OpName %25 "image_3d"
OpName %27 "image_multisampled_2d"
OpName %29 "image_storage_1d"
OpName %31 "image_storage_2d"
OpName %33 "image_storage_2d_array"
OpName %35 "image_storage_3d"
OpName %38 "coords"
OpName %39 "level"
OpName %40 "test_textureLoad_1d"
OpName %56 "coords"
OpName %57 "level"
OpName %58 "test_textureLoad_2d"
OpName %74 "coords"
OpName %75 "index"
OpName %76 "level"
OpName %77 "test_textureLoad_2d_array_u"
OpName %95 "coords"
OpName %96 "index"
OpName %97 "level"
OpName %98 "test_textureLoad_2d_array_s"
OpName %114 "coords"
OpName %115 "level"
OpName %116 "test_textureLoad_3d"
OpName %131 "coords"
OpName %132 "_sample"
OpName %133 "test_textureLoad_multisampled_2d"
OpName %147 "coords"
OpName %148 "value"
OpName %149 "test_textureStore_1d"
OpName %154 "coords"
OpName %155 "value"
OpName %156 "test_textureStore_2d"
OpName %161 "coords"
OpName %162 "array_index"
OpName %163 "value"
OpName %164 "test_textureStore_2d_array_u"
OpName %171 "coords"
OpName %172 "array_index"
OpName %173 "value"
OpName %174 "test_textureStore_2d_array_s"
OpName %180 "coords"
OpName %181 "value"
OpName %182 "test_textureStore_3d"
OpName %189 "fragment_shader"
OpDecorate %19 DescriptorSet 0
OpDecorate %19 Binding 0
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 1
OpDecorate %23 DescriptorSet 0
OpDecorate %23 Binding 2
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 3
OpDecorate %27 DescriptorSet 0
OpDecorate %27 Binding 4
OpDecorate %29 NonReadable
OpDecorate %29 DescriptorSet 0
OpDecorate %29 Binding 5
OpDecorate %31 NonReadable
OpDecorate %31 DescriptorSet 0
OpDecorate %31 Binding 6
OpDecorate %33 NonReadable
OpDecorate %33 DescriptorSet 0
OpDecorate %33 Binding 7
OpDecorate %35 NonReadable
OpDecorate %35 DescriptorSet 0
OpDecorate %35 Binding 8
OpDecorate %187 Location 0
%2 = OpTypeVoid
%5 = OpTypeFloat 32
%4 = OpTypeImage %5 1D 0 0 0 1 Unknown
%6 = OpTypeInt 32 1
%7 = OpTypeVector %5 4
%8 = OpTypeImage %5 2D 0 0 0 1 Unknown
%9 = OpTypeVector %6 2
%10 = OpTypeImage %5 2D 0 1 0 1 Unknown
%11 = OpTypeInt 32 0
%12 = OpTypeImage %5 3D 0 0 0 1 Unknown
%13 = OpTypeVector %6 3
%14 = OpTypeImage %5 2D 0 0 1 1 Unknown
%15 = OpTypeImage %5 1D 0 0 0 2 Rgba8
%16 = OpTypeImage %5 2D 0 0 0 2 Rgba8
%17 = OpTypeImage %5 2D 0 1 0 2 Rgba8
%18 = OpTypeImage %5 3D 0 0 0 2 Rgba8
%20 = OpTypePointer UniformConstant %4
%19 = OpVariable  %20  UniformConstant
%22 = OpTypePointer UniformConstant %8
%21 = OpVariable  %22  UniformConstant
%24 = OpTypePointer UniformConstant %10
%23 = OpVariable  %24  UniformConstant
%26 = OpTypePointer UniformConstant %12
%25 = OpVariable  %26  UniformConstant
%28 = OpTypePointer UniformConstant %14
%27 = OpVariable  %28  UniformConstant
%30 = OpTypePointer UniformConstant %15
%29 = OpVariable  %30  UniformConstant
%32 = OpTypePointer UniformConstant %16
%31 = OpVariable  %32  UniformConstant
%34 = OpTypePointer UniformConstant %17
%33 = OpVariable  %34  UniformConstant
%36 = OpTypePointer UniformConstant %18
%35 = OpVariable  %36  UniformConstant
%41 = OpTypeFunction %7 %6 %6
%44 = OpTypeBool
%45 = OpConstantNull  %7
%59 = OpTypeFunction %7 %9 %6
%67 = OpTypeVector %44 2
%78 = OpTypeFunction %7 %9 %11 %6
%88 = OpTypeVector %44 3
%99 = OpTypeFunction %7 %9 %6 %6
%117 = OpTypeFunction %7 %13 %6
%150 = OpTypeFunction %2 %6 %7
%157 = OpTypeFunction %2 %9 %7
%165 = OpTypeFunction %2 %9 %11 %7
%175 = OpTypeFunction %2 %9 %6 %7
%183 = OpTypeFunction %2 %13 %7
%188 = OpTypePointer Output %7
%187 = OpVariable  %188  Output
%190 = OpTypeFunction %2
%200 = OpConstant  %6  0
%201 = OpConstantNull  %9
%202 = OpConstant  %11  0
%203 = OpConstantNull  %13
%204 = OpConstant  %5  0
%205 = OpConstantComposite  %7  %204 %204 %204 %204
%40 = OpFunction  %7  None %41
%38 = OpFunctionParameter  %6
%39 = OpFunctionParameter  %6
%37 = OpLabel
%42 = OpLoad  %4  %19
OpBranch %43
%43 = OpLabel
OpLine %3 5 11
%46 = OpImageQueryLevels  %6  %42
%47 = OpULessThan  %44  %39 %46
OpSelectionMerge %48 None
OpBranchConditional %47 %49 %48
%49 = OpLabel
%50 = OpImageQuerySizeLod  %6  %42 %39
%51 = OpULessThan  %44  %38 %50
OpBranchConditional %51 %52 %48
%52 = OpLabel
%53 = OpImageFetch  %7  %42 %38 Lod %39
OpBranch %48
%48 = OpLabel
%54 = OpPhi  %7  %45 %43 %45 %49 %53 %52
OpReturnValue %54
OpFunctionEnd
%58 = OpFunction  %7  None %59
%56 = OpFunctionParameter  %9
%57 = OpFunctionParameter  %6
%55 = OpLabel
%60 = OpLoad  %8  %21
OpBranch %61
%61 = OpLabel
OpLine %3 12 11
%62 = OpImageQueryLevels  %6  %60
%63 = OpULessThan  %44  %57 %62
OpSelectionMerge %64 None
OpBranchConditional %63 %65 %64
%65 = OpLabel
%66 = OpImageQuerySizeLod  %9  %60 %57
%68 = OpULessThan  %67  %56 %66
%69 = OpAll  %44  %68
OpBranchConditional %69 %70 %64
%70 = OpLabel
%71 = OpImageFetch  %7  %60 %56 Lod %57
OpBranch %64
%64 = OpLabel
%72 = OpPhi  %7  %45 %61 %45 %65 %71 %70
OpReturnValue %72
OpFunctionEnd
%77 = OpFunction  %7  None %78
%74 = OpFunctionParameter  %9
%75 = OpFunctionParameter  %11
%76 = OpFunctionParameter  %6
%73 = OpLabel
%79 = OpLoad  %10  %23
OpBranch %80
%80 = OpLabel
OpLine %3 19 11
%81 = OpBitcast  %6  %75
%82 = OpCompositeConstruct  %13  %74 %81
%83 = OpImageQueryLevels  %6  %79
%84 = OpULessThan  %44  %76 %83
OpSelectionMerge %85 None
OpBranchConditional %84 %86 %85
%86 = OpLabel
%87 = OpImageQuerySizeLod  %13  %79 %76
%89 = OpULessThan  %88  %82 %87
%90 = OpAll  %44  %89
OpBranchConditional %90 %91 %85
%91 = OpLabel
%92 = OpImageFetch  %7  %79 %82 Lod %76
OpBranch %85
%85 = OpLabel
%93 = OpPhi  %7  %45 %80 %45 %86 %92 %91
OpReturnValue %93
OpFunctionEnd
%98 = OpFunction  %7  None %99
%95 = OpFunctionParameter  %9
%96 = OpFunctionParameter  %6
%97 = OpFunctionParameter  %6
%94 = OpLabel
%100 = OpLoad  %10  %23
OpBranch %101
%101 = OpLabel
OpLine %3 23 11
%102 = OpCompositeConstruct  %13  %95 %96
%103 = OpImageQueryLevels  %6  %100
%104 = OpULessThan  %44  %97 %103
OpSelectionMerge %105 None
OpBranchConditional %104 %106 %105
%106 = OpLabel
%107 = OpImageQuerySizeLod  %13  %100 %97
%108 = OpULessThan  %88  %102 %107
%109 = OpAll  %44  %108
OpBranchConditional %109 %110 %105
%110 = OpLabel
%111 = OpImageFetch  %7  %100 %102 Lod %97
OpBranch %105
%105 = OpLabel
%112 = OpPhi  %7  %45 %101 %45 %106 %111 %110
OpReturnValue %112
OpFunctionEnd
%116 = OpFunction  %7  None %117
%114 = OpFunctionParameter  %13
%115 = OpFunctionParameter  %6
%113 = OpLabel
%118 = OpLoad  %12  %25
OpBranch %119
%119 = OpLabel
OpLine %3 30 11
%120 = OpImageQueryLevels  %6  %118
%121 = OpULessThan  %44  %115 %120
OpSelectionMerge %122 None
OpBranchConditional %121 %123 %122
%123 = OpLabel
%124 = OpImageQuerySizeLod  %13  %118 %115
%125 = OpULessThan  %88  %114 %124
%126 = OpAll  %44  %125
OpBranchConditional %126 %127 %122
%127 = OpLabel
%128 = OpImageFetch  %7  %118 %114 Lod %115
OpBranch %122
%122 = OpLabel
%129 = OpPhi  %7  %45 %119 %45 %123 %128 %127
OpReturnValue %129
OpFunctionEnd
%133 = OpFunction  %7  None %59
%131 = OpFunctionParameter  %9
%132 = OpFunctionParameter  %6
%130 = OpLabel
%134 = OpLoad  %14  %27
OpBranch %135
%135 = OpLabel
OpLine %3 37 11
%136 = OpImageQuerySamples  %6  %134
%137 = OpULessThan  %44  %132 %136
OpSelectionMerge %138 None
OpBranchConditional %137 %139 %138
%139 = OpLabel
%140 = OpImageQuerySize  %9  %134
%141 = OpULessThan  %67  %131 %140
%142 = OpAll  %44  %141
OpBranchConditional %142 %143 %138
%143 = OpLabel
%144 = OpImageFetch  %7  %134 %131 Sample %132
OpBranch %138
%138 = OpLabel
%145 = OpPhi  %7  %45 %135 %45 %139 %144 %143
OpReturnValue %145
OpFunctionEnd
%149 = OpFunction  %2  None %150
%147 = OpFunctionParameter  %6
%148 = OpFunctionParameter  %7
%146 = OpLabel
%151 = OpLoad  %15  %29
OpBranch %152
%152 = OpLabel
OpLine %3 44 5
OpImageWrite %151 %147 %148
OpReturn
OpFunctionEnd
%156 = OpFunction  %2  None %157
%154 = OpFunctionParameter  %9
%155 = OpFunctionParameter  %7
%153 = OpLabel
%158 = OpLoad  %16  %31
OpBranch %159
%159 = OpLabel
OpLine %3 51 5
OpImageWrite %158 %154 %155
OpReturn
OpFunctionEnd
%164 = OpFunction  %2  None %165
%161 = OpFunctionParameter  %9
%162 = OpFunctionParameter  %11
%163 = OpFunctionParameter  %7
%160 = OpLabel
%166 = OpLoad  %17  %33
OpBranch %167
%167 = OpLabel
OpLine %3 58 2
%168 = OpBitcast  %6  %162
%169 = OpCompositeConstruct  %13  %161 %168
OpImageWrite %166 %169 %163
OpReturn
OpFunctionEnd
%174 = OpFunction  %2  None %175
%171 = OpFunctionParameter  %9
%172 = OpFunctionParameter  %6
%173 = OpFunctionParameter  %7
%170 = OpLabel
%176 = OpLoad  %17  %33
OpBranch %177
%177 = OpLabel
OpLine %3 62 2
%178 = OpCompositeConstruct  %13  %171 %172
OpImageWrite %176 %178 %173
OpReturn
OpFunctionEnd
%182 = OpFunction  %2  None %183
%180 = OpFunctionParameter  %13
%181 = OpFunctionParameter  %7
%179 = OpLabel
%184 = OpLoad  %18  %35
OpBranch %185
%185 = OpLabel
OpLine %3 69 5
OpImageWrite %184 %180 %181
OpReturn
OpFunctionEnd
%189 = OpFunction  %2  None %190
%186 = OpLabel
%191 = OpLoad  %4  %19
%192 = OpLoad  %8  %21
%193 = OpLoad  %10  %23
%194 = OpLoad  %12  %25
%195 = OpLoad  %14  %27
%196 = OpLoad  %15  %29
%197 = OpLoad  %16  %31
%198 = OpLoad  %17  %33
%199 = OpLoad  %18  %35
OpBranch %206
%206 = OpLabel
OpLine %3 76 5
%207 = OpFunctionCall  %7  %40 %200 %200
OpLine %3 77 5
%208 = OpFunctionCall  %7  %58 %201 %200
OpLine %3 78 5
%209 = OpFunctionCall  %7  %77 %201 %202 %200
OpLine %3 79 5
%210 = OpFunctionCall  %7  %98 %201 %200 %200
OpLine %3 80 5
%211 = OpFunctionCall  %7  %116 %203 %200
OpLine %3 81 5
%212 = OpFunctionCall  %7  %133 %201 %200
OpLine %3 82 5
%213 = OpFunctionCall  %2  %149 %200 %45
OpLine %3 83 5
%214 = OpFunctionCall  %2  %156 %201 %45
OpLine %3 84 5
%215 = OpFunctionCall  %2  %164 %201 %202 %45
OpLine %3 85 5
%216 = OpFunctionCall  %2  %174 %201 %200 %45
OpLine %3 86 5
%217 = OpFunctionCall  %2  %182 %203 %45
OpLine %3 88 12
OpStore %187 %205
OpReturn
OpFunctionEnd