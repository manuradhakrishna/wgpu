; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 414
OpCapability Shader
OpExtension "SPV_KHR_storage_buffer_storage_class"
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint Vertex %331 "foo_vert" %326 %329
OpEntryPoint Fragment %387 "foo_frag" %386
OpEntryPoint GLCompute %405 "foo_compute"
OpExecutionMode %387 OriginUpperLeft
OpExecutionMode %405 LocalSize 1 1 1
%3 = OpString "access.wgsl"
OpSource Unknown 0 %3 "// This snapshot tests accessing various containers, dereferencing pointers.

struct GlobalConst {
    a: u32,
    b: vec3<u32>,
    c: i32,
}
// tests msl padding insertion for global constants
var<private> msl_padding_global_const: GlobalConst = GlobalConst(0u, vec3<u32>(0u, 0u, 0u), 0);

struct AlignedWrapper {
    @align(8) value: i32
}

struct Bar {
    _matrix: mat4x3<f32>,
    matrix_array: array<mat2x2<f32>, 2>,
    atom: atomic<i32>,
    atom_arr: array<atomic<i32>, 10>,
    arr: array<vec2<u32>, 2>,
    data: array<AlignedWrapper>,
}

@group(0) @binding(0)
var<storage,read_write> bar: Bar;

struct Baz {
    m: mat3x2<f32>,
}

@group(0) @binding(1)
var<uniform> baz: Baz;

@group(0) @binding(2)
var<storage,read_write> qux: vec2<i32>;

fn test_matrix_within_struct_accesses() {
    // Test HLSL accesses to Cx2 matrices. There are additional tests
    // in `hlsl_mat_cx2.wgsl`.

    var idx = 1;

    idx--;

    // loads
    let l0 = baz.m;
    let l1 = baz.m[0];
    let l2 = baz.m[idx];
    let l3 = baz.m[0][1];
    let l4 = baz.m[0][idx];
    let l5 = baz.m[idx][1];
    let l6 = baz.m[idx][idx];

    var t = Baz(mat3x2<f32>(vec2<f32>(1.0), vec2<f32>(2.0), vec2<f32>(3.0)));

    idx++;

    // stores
    t.m = mat3x2<f32>(vec2<f32>(6.0), vec2<f32>(5.0), vec2<f32>(4.0));
    t.m[0] = vec2<f32>(9.0);
    t.m[idx] = vec2<f32>(90.0);
    t.m[0][1] = 10.0;
    t.m[0][idx] = 20.0;
    t.m[idx][1] = 30.0;
    t.m[idx][idx] = 40.0;
}

struct MatCx2InArray {
    am: array<mat4x2<f32>, 2>,
}

@group(0) @binding(3)
var<uniform> nested_mat_cx2: MatCx2InArray;

fn test_matrix_within_array_within_struct_accesses() {
    var idx = 1;

    idx--;

    // loads
    let l0 = nested_mat_cx2.am;
    let l1 = nested_mat_cx2.am[0];
    let l2 = nested_mat_cx2.am[0][0];
    let l3 = nested_mat_cx2.am[0][idx];
    let l4 = nested_mat_cx2.am[0][0][1];
    let l5 = nested_mat_cx2.am[0][0][idx];
    let l6 = nested_mat_cx2.am[0][idx][1];
    let l7 = nested_mat_cx2.am[0][idx][idx];

    var t = MatCx2InArray(array<mat4x2<f32>, 2>());

    idx++;

    // stores
    t.am = array<mat4x2<f32>, 2>();
    t.am[0] = mat4x2<f32>(vec2<f32>(8.0), vec2<f32>(7.0), vec2<f32>(6.0), vec2<f32>(5.0));
    t.am[0][0] = vec2<f32>(9.0);
    t.am[0][idx] = vec2<f32>(90.0);
    t.am[0][0][1] = 10.0;
    t.am[0][0][idx] = 20.0;
    t.am[0][idx][1] = 30.0;
    t.am[0][idx][idx] = 40.0;
}

fn read_from_private(foo: ptr<function, f32>) -> f32 {
    return *foo;
}

fn test_arr_as_arg(a: array<array<f32, 10>, 5>) -> f32 {
    return a[4][9];
}

@vertex
fn foo_vert(@builtin(vertex_index) vi: u32) -> @builtin(position) vec4<f32> {
    var foo: f32 = 0.0;
    // We should check that backed doesn't skip this expression
    let baz: f32 = foo;
    foo = 1.0;

    _ = msl_padding_global_const;
    test_matrix_within_struct_accesses();
    test_matrix_within_array_within_struct_accesses();

    // test storage loads
    let _matrix = bar._matrix;
    let arr = bar.arr;
    let index = 3u;
    let b = bar._matrix[index].x;
    let a = bar.data[arrayLength(&bar.data) - 2u].value;
    let c = qux;

    // test pointer types
    let data_pointer: ptr<storage, i32, read_write> = &bar.data[0].value;
    let foo_value = read_from_private(&foo);

    // test array indexing
    var c2 = array<i32, 5>(a, i32(b), 3, 4, 5);
    c2[vi + 1u] = 42;
    let value = c2[vi];

    test_arr_as_arg(array<array<f32, 10>, 5>());

    return vec4<f32>(_matrix * vec4<f32>(vec4<i32>(value)), 2.0);
}

@fragment
fn foo_frag() -> @location(0) vec4<f32> {
    // test storage stores
    bar._matrix[1].z = 1.0;
    bar._matrix = mat4x3<f32>(vec3<f32>(0.0), vec3<f32>(1.0), vec3<f32>(2.0), vec3<f32>(3.0));
    bar.arr = array<vec2<u32>, 2>(vec2<u32>(0u), vec2<u32>(1u));
    bar.data[1].value = 1;
    qux = vec2<i32>();

    return vec4<f32>(0.0);
}

fn assign_through_ptr_fn(p: ptr<function, u32>) {
    *p = 42u;
}

fn assign_array_through_ptr_fn(foo: ptr<function, array<vec4<f32>, 2>>) {
    *foo = array<vec4<f32>, 2>(vec4(1.0), vec4(2.0));
}

fn assign_through_ptr() {
    var val = 33u;
    assign_through_ptr_fn(&val);

    var arr = array<vec4<f32>, 2>(vec4(6.0), vec4(7.0));
    assign_array_through_ptr_fn(&arr);
}

struct AssignToMember {
  x: u32,
}

fn fetch_arg_ptr_member(p: ptr<function, AssignToMember>) -> u32 {
  return (*p).x;
}

fn assign_to_arg_ptr_member(p: ptr<function, AssignToMember>) {
  (*p).x = 10u;
}

fn fetch_arg_ptr_array_element(p: ptr<function, array<u32, 4>>) -> u32 {
  return (*p)[1];
}

fn assign_to_arg_ptr_array_element(p: ptr<function, array<u32, 4>>) {
  (*p)[1] = 10u;
}

fn assign_to_ptr_components() {
   var s1: AssignToMember;
   assign_to_arg_ptr_member(&s1);
   fetch_arg_ptr_member(&s1);

   var a1: array<u32, 4>;
   assign_to_arg_ptr_array_element(&a1);
   fetch_arg_ptr_array_element(&a1);
}

fn index_ptr(value: bool) -> bool {
    var a = array<bool, 1>(value);
    let p = &a;
    return p[0];
}

struct S { m: i32 };

fn member_ptr() -> i32 {
    var s: S = S(42);
    let p = &s;
    return p.m;
}

struct Inner { delicious: i32 }

struct Outer { om_nom_nom: Inner, thing: u32 }

fn let_members_of_members() -> i32 {
    let thing = Outer();

    let inner = thing.om_nom_nom;
    let delishus = inner.delicious;

    if (thing.thing != u32(delishus)) {
        // LOL
    }

    return thing.om_nom_nom.delicious;
}

fn var_members_of_members() -> i32 {
    var thing = Outer();

    var inner = thing.om_nom_nom;
    var delishus = inner.delicious;

    if (thing.thing != u32(delishus)) {
        // LOL
    }

    return thing.om_nom_nom.delicious;
}

@compute @workgroup_size(1)
fn foo_compute() {
    assign_through_ptr();
    assign_to_ptr_components();
    index_ptr(true);
    member_ptr();
    let_members_of_members();
    var_members_of_members();
}
"
OpMemberName %7 0 "a"
OpMemberName %7 1 "b"
OpMemberName %7 2 "c"
OpName %7 "GlobalConst"
OpMemberName %8 0 "value"
OpName %8 "AlignedWrapper"
OpMemberName %21 0 "_matrix"
OpMemberName %21 1 "matrix_array"
OpMemberName %21 2 "atom"
OpMemberName %21 3 "atom_arr"
OpMemberName %21 4 "arr"
OpMemberName %21 5 "data"
OpName %21 "Bar"
OpMemberName %23 0 "m"
OpName %23 "Baz"
OpMemberName %27 0 "am"
OpName %27 "MatCx2InArray"
OpMemberName %37 0 "x"
OpName %37 "AssignToMember"
OpMemberName %45 0 "m"
OpName %45 "S"
OpMemberName %46 0 "delicious"
OpName %46 "Inner"
OpMemberName %47 0 "om_nom_nom"
OpMemberName %47 1 "thing"
OpName %47 "Outer"
OpName %52 "msl_padding_global_const"
OpName %54 "bar"
OpName %56 "baz"
OpName %59 "qux"
OpName %62 "nested_mat_cx2"
OpName %66 "test_matrix_within_struct_accesses"
OpName %94 "idx"
OpName %96 "t"
OpName %140 "test_matrix_within_array_within_struct_accesses"
OpName %150 "idx"
OpName %151 "t"
OpName %197 "foo"
OpName %198 "read_from_private"
OpName %203 "a"
OpName %204 "test_arr_as_arg"
OpName %210 "p"
OpName %211 "assign_through_ptr_fn"
OpName %216 "foo"
OpName %217 "assign_array_through_ptr_fn"
OpName %224 "assign_through_ptr"
OpName %229 "val"
OpName %230 "arr"
OpName %235 "p"
OpName %236 "fetch_arg_ptr_member"
OpName %242 "p"
OpName %243 "assign_to_arg_ptr_member"
OpName %248 "p"
OpName %249 "fetch_arg_ptr_array_element"
OpName %255 "p"
OpName %256 "assign_to_arg_ptr_array_element"
OpName %261 "assign_to_ptr_components"
OpName %262 "s1"
OpName %264 "a1"
OpName %272 "value"
OpName %273 "index_ptr"
OpName %275 "a"
OpName %284 "member_ptr"
OpName %288 "s"
OpName %294 "let_members_of_members"
OpName %305 "var_members_of_members"
OpName %306 "thing"
OpName %308 "inner"
OpName %311 "delishus"
OpName %326 "vi"
OpName %331 "foo_vert"
OpName %342 "foo"
OpName %343 "c2"
OpName %387 "foo_frag"
OpName %405 "foo_compute"
OpMemberDecorate %7 0 Offset 0
OpMemberDecorate %7 1 Offset 16
OpMemberDecorate %7 2 Offset 28
OpMemberDecorate %8 0 Offset 0
OpDecorate %14 ArrayStride 16
OpDecorate %16 ArrayStride 4
OpDecorate %19 ArrayStride 8
OpDecorate %20 ArrayStride 8
OpMemberDecorate %21 0 Offset 0
OpMemberDecorate %21 0 ColMajor
OpMemberDecorate %21 0 MatrixStride 16
OpMemberDecorate %21 1 Offset 64
OpMemberDecorate %21 1 ColMajor
OpMemberDecorate %21 1 MatrixStride 8
OpMemberDecorate %21 2 Offset 96
OpMemberDecorate %21 3 Offset 100
OpMemberDecorate %21 4 Offset 144
OpMemberDecorate %21 5 Offset 160
OpDecorate %21 Block
OpMemberDecorate %23 0 Offset 0
OpMemberDecorate %23 0 ColMajor
OpMemberDecorate %23 0 MatrixStride 8
OpDecorate %26 ArrayStride 32
OpMemberDecorate %27 0 Offset 0
OpMemberDecorate %27 0 ColMajor
OpMemberDecorate %27 0 MatrixStride 8
OpDecorate %29 ArrayStride 4
OpDecorate %30 ArrayStride 40
OpDecorate %33 ArrayStride 4
OpDecorate %35 ArrayStride 16
OpMemberDecorate %37 0 Offset 0
OpDecorate %39 ArrayStride 4
OpDecorate %43 ArrayStride 1
OpMemberDecorate %45 0 Offset 0
OpMemberDecorate %46 0 Offset 0
OpMemberDecorate %47 0 Offset 0
OpMemberDecorate %47 1 Offset 4
OpDecorate %54 DescriptorSet 0
OpDecorate %54 Binding 0
OpDecorate %56 DescriptorSet 0
OpDecorate %56 Binding 1
OpDecorate %57 Block
OpMemberDecorate %57 0 Offset 0
OpDecorate %59 DescriptorSet 0
OpDecorate %59 Binding 2
OpDecorate %60 Block
OpMemberDecorate %60 0 Offset 0
OpDecorate %62 DescriptorSet 0
OpDecorate %62 Binding 3
OpDecorate %63 Block
OpMemberDecorate %63 0 Offset 0
OpDecorate %326 BuiltIn VertexIndex
OpDecorate %329 BuiltIn Position
OpDecorate %386 Location 0
%2 = OpTypeVoid
%4 = OpTypeInt 32 0
%5 = OpTypeVector %4 3
%6 = OpTypeInt 32 1
%7 = OpTypeStruct %4 %5 %6
%8 = OpTypeStruct %6
%9 = OpTypeFloat 32
%11 = OpTypeVector %9 3
%10 = OpTypeMatrix %11 4
%13 = OpTypeVector %9 2
%12 = OpTypeMatrix %13 2
%15 = OpConstant  %4  2
%14 = OpTypeArray %12 %15
%17 = OpConstant  %4  10
%16 = OpTypeArray %6 %17
%18 = OpTypeVector %4 2
%19 = OpTypeArray %18 %15
%20 = OpTypeRuntimeArray %8
%21 = OpTypeStruct %10 %14 %6 %16 %19 %20
%22 = OpTypeMatrix %13 3
%23 = OpTypeStruct %22
%24 = OpTypeVector %6 2
%25 = OpTypeMatrix %13 4
%26 = OpTypeArray %25 %15
%27 = OpTypeStruct %26
%28 = OpTypePointer Function %9
%29 = OpTypeArray %9 %17
%31 = OpConstant  %4  5
%30 = OpTypeArray %29 %31
%32 = OpTypeVector %9 4
%33 = OpTypeArray %6 %31
%34 = OpTypePointer Function %4
%35 = OpTypeArray %32 %15
%36 = OpTypePointer Function %35
%37 = OpTypeStruct %4
%38 = OpTypePointer Function %37
%40 = OpConstant  %4  4
%39 = OpTypeArray %4 %40
%41 = OpTypePointer Function %39
%42 = OpTypeBool
%44 = OpConstant  %4  1
%43 = OpTypeArray %42 %44
%45 = OpTypeStruct %6
%46 = OpTypeStruct %6
%47 = OpTypeStruct %46 %4
%48 = OpConstant  %4  0
%49 = OpConstantComposite  %5  %48 %48 %48
%50 = OpConstant  %6  0
%51 = OpConstantComposite  %7  %48 %49 %50
%53 = OpTypePointer Private %7
%52 = OpVariable  %53  Private %51
%55 = OpTypePointer StorageBuffer %21
%54 = OpVariable  %55  StorageBuffer
%57 = OpTypeStruct %23
%58 = OpTypePointer Uniform %57
%56 = OpVariable  %58  Uniform
%60 = OpTypeStruct %24
%61 = OpTypePointer StorageBuffer %60
%59 = OpVariable  %61  StorageBuffer
%63 = OpTypeStruct %27
%64 = OpTypePointer Uniform %63
%62 = OpVariable  %64  Uniform
%67 = OpTypeFunction %2
%68 = OpTypePointer Uniform %23
%70 = OpConstant  %6  1
%71 = OpConstant  %9  1
%72 = OpConstantComposite  %13  %71 %71
%73 = OpConstant  %9  2
%74 = OpConstantComposite  %13  %73 %73
%75 = OpConstant  %9  3
%76 = OpConstantComposite  %13  %75 %75
%77 = OpConstantComposite  %22  %72 %74 %76
%78 = OpConstantComposite  %23  %77
%79 = OpConstant  %9  6
%80 = OpConstantComposite  %13  %79 %79
%81 = OpConstant  %9  5
%82 = OpConstantComposite  %13  %81 %81
%83 = OpConstant  %9  4
%84 = OpConstantComposite  %13  %83 %83
%85 = OpConstantComposite  %22  %80 %82 %84
%86 = OpConstant  %9  9
%87 = OpConstantComposite  %13  %86 %86
%88 = OpConstant  %9  90
%89 = OpConstantComposite  %13  %88 %88
%90 = OpConstant  %9  10
%91 = OpConstant  %9  20
%92 = OpConstant  %9  30
%93 = OpConstant  %9  40
%95 = OpTypePointer Function %6
%97 = OpTypePointer Function %23
%101 = OpTypePointer Uniform %22
%104 = OpTypePointer Uniform %13
%110 = OpTypePointer Uniform %9
%125 = OpTypePointer Function %22
%127 = OpTypePointer Function %13
%141 = OpTypePointer Uniform %27
%143 = OpConstantNull  %26
%144 = OpConstantComposite  %27  %143
%145 = OpConstant  %9  8
%146 = OpConstantComposite  %13  %145 %145
%147 = OpConstant  %9  7
%148 = OpConstantComposite  %13  %147 %147
%149 = OpConstantComposite  %25  %146 %148 %80 %82
%152 = OpTypePointer Function %27
%156 = OpTypePointer Uniform %26
%159 = OpTypePointer Uniform %25
%181 = OpTypePointer Function %26
%183 = OpTypePointer Function %25
%199 = OpTypeFunction %9 %28
%205 = OpTypeFunction %9 %30
%212 = OpTypeFunction %2 %34
%213 = OpConstant  %4  42
%218 = OpTypeFunction %2 %36
%219 = OpConstantComposite  %32  %71 %71 %71 %71
%220 = OpConstantComposite  %32  %73 %73 %73 %73
%221 = OpConstantComposite  %35  %219 %220
%225 = OpConstant  %4  33
%226 = OpConstantComposite  %32  %79 %79 %79 %79
%227 = OpConstantComposite  %32  %147 %147 %147 %147
%228 = OpConstantComposite  %35  %226 %227
%237 = OpTypeFunction %4 %38
%244 = OpTypeFunction %2 %38
%250 = OpTypeFunction %4 %41
%257 = OpTypeFunction %2 %41
%263 = OpConstantNull  %37
%265 = OpConstantNull  %39
%274 = OpTypeFunction %42 %42
%276 = OpTypePointer Function %43
%277 = OpConstantNull  %43
%280 = OpTypePointer Function %42
%285 = OpTypeFunction %6
%286 = OpConstant  %6  42
%287 = OpConstantComposite  %45  %286
%289 = OpTypePointer Function %45
%295 = OpConstantNull  %47
%307 = OpTypePointer Function %47
%309 = OpTypePointer Function %46
%310 = OpConstantNull  %46
%312 = OpConstantNull  %6
%327 = OpTypePointer Input %4
%326 = OpVariable  %327  Input
%330 = OpTypePointer Output %32
%329 = OpVariable  %330  Output
%333 = OpTypePointer StorageBuffer %24
%336 = OpConstant  %9  0
%337 = OpConstant  %4  3
%338 = OpConstant  %6  3
%339 = OpConstant  %6  4
%340 = OpConstant  %6  5
%341 = OpConstantNull  %30
%344 = OpTypePointer Function %33
%345 = OpConstantNull  %33
%351 = OpTypePointer StorageBuffer %10
%354 = OpTypePointer StorageBuffer %19
%357 = OpTypePointer StorageBuffer %11
%358 = OpTypePointer StorageBuffer %9
%361 = OpTypePointer StorageBuffer %20
%364 = OpTypePointer StorageBuffer %8
%365 = OpTypePointer StorageBuffer %6
%370 = OpConstant  %9  -2147483600
%371 = OpConstant  %9  2147483500
%380 = OpTypeVector %6 4
%386 = OpVariable  %330  Output
%389 = OpConstantComposite  %11  %336 %336 %336
%390 = OpConstantComposite  %11  %71 %71 %71
%391 = OpConstantComposite  %11  %73 %73 %73
%392 = OpConstantComposite  %11  %75 %75 %75
%393 = OpConstantComposite  %10  %389 %390 %391 %392
%394 = OpConstantComposite  %18  %48 %48
%395 = OpConstantComposite  %18  %44 %44
%396 = OpConstantComposite  %19  %394 %395
%397 = OpConstantNull  %24
%398 = OpConstantComposite  %32  %336 %336 %336 %336
%406 = OpConstantTrue  %42
%66 = OpFunction  %2  None %67
%65 = OpLabel
%94 = OpVariable  %95  Function %70
%96 = OpVariable  %97  Function %78
%69 = OpAccessChain  %68  %56 %48
OpBranch %98
%98 = OpLabel
OpLine %3 43 5
%99 = OpLoad  %6  %94
%100 = OpISub  %6  %99 %70
OpLine %3 43 5
OpStore %94 %100
OpLine %3 46 14
%102 = OpAccessChain  %101  %69 %48
%103 = OpLoad  %22  %102
OpLine %3 47 14
OpLine %3 47 14
%105 = OpAccessChain  %104  %69 %48 %48
%106 = OpLoad  %13  %105
OpLine %3 48 14
%107 = OpLoad  %6  %94
%108 = OpAccessChain  %104  %69 %48 %107
%109 = OpLoad  %13  %108
OpLine %3 49 14
OpLine %3 49 14
OpLine %3 49 14
%111 = OpAccessChain  %110  %69 %48 %48 %44
%112 = OpLoad  %9  %111
OpLine %3 50 14
OpLine %3 50 14
%113 = OpLoad  %6  %94
%114 = OpAccessChain  %110  %69 %48 %48 %113
%115 = OpLoad  %9  %114
OpLine %3 51 14
%116 = OpLoad  %6  %94
OpLine %3 51 14
%117 = OpAccessChain  %110  %69 %48 %116 %44
%118 = OpLoad  %9  %117
OpLine %3 52 14
%119 = OpLoad  %6  %94
%120 = OpLoad  %6  %94
%121 = OpAccessChain  %110  %69 %48 %119 %120
%122 = OpLoad  %9  %121
OpLine %3 54 29
OpLine %3 54 45
OpLine %3 54 13
OpLine %3 56 5
%123 = OpLoad  %6  %94
%124 = OpIAdd  %6  %123 %70
OpLine %3 56 5
OpStore %94 %124
OpLine %3 59 5
OpLine %3 59 23
OpLine %3 59 39
OpLine %3 59 11
OpLine %3 59 5
%126 = OpAccessChain  %125  %96 %48
OpStore %126 %85
OpLine %3 60 5
OpLine %3 60 5
OpLine %3 60 14
OpLine %3 60 5
%128 = OpAccessChain  %127  %96 %48 %48
OpStore %128 %87
OpLine %3 61 5
%129 = OpLoad  %6  %94
OpLine %3 61 16
OpLine %3 61 5
%130 = OpAccessChain  %127  %96 %48 %129
OpStore %130 %89
OpLine %3 62 5
OpLine %3 62 5
OpLine %3 62 5
OpLine %3 62 5
%131 = OpAccessChain  %28  %96 %48 %48 %44
OpStore %131 %90
OpLine %3 63 5
OpLine %3 63 5
%132 = OpLoad  %6  %94
OpLine %3 63 5
%133 = OpAccessChain  %28  %96 %48 %48 %132
OpStore %133 %91
OpLine %3 64 5
%134 = OpLoad  %6  %94
OpLine %3 64 5
OpLine %3 64 5
%135 = OpAccessChain  %28  %96 %48 %134 %44
OpStore %135 %92
OpLine %3 65 5
%136 = OpLoad  %6  %94
%137 = OpLoad  %6  %94
OpLine %3 65 5
%138 = OpAccessChain  %28  %96 %48 %136 %137
OpStore %138 %93
OpReturn
OpFunctionEnd
%140 = OpFunction  %2  None %67
%139 = OpLabel
%150 = OpVariable  %95  Function %70
%151 = OpVariable  %152  Function %144
%142 = OpAccessChain  %141  %62 %48
OpBranch %153
%153 = OpLabel
OpLine %3 78 5
%154 = OpLoad  %6  %150
%155 = OpISub  %6  %154 %70
OpLine %3 78 5
OpStore %150 %155
OpLine %3 81 14
%157 = OpAccessChain  %156  %142 %48
%158 = OpLoad  %26  %157
OpLine %3 82 14
OpLine %3 82 14
%160 = OpAccessChain  %159  %142 %48 %48
%161 = OpLoad  %25  %160
OpLine %3 83 14
OpLine %3 83 14
OpLine %3 83 14
%162 = OpAccessChain  %104  %142 %48 %48 %48
%163 = OpLoad  %13  %162
OpLine %3 84 14
OpLine %3 84 14
%164 = OpLoad  %6  %150
%165 = OpAccessChain  %104  %142 %48 %48 %164
%166 = OpLoad  %13  %165
OpLine %3 85 14
OpLine %3 85 14
OpLine %3 85 14
OpLine %3 85 14
%167 = OpAccessChain  %110  %142 %48 %48 %48 %44
%168 = OpLoad  %9  %167
OpLine %3 86 14
OpLine %3 86 14
OpLine %3 86 14
%169 = OpLoad  %6  %150
%170 = OpAccessChain  %110  %142 %48 %48 %48 %169
%171 = OpLoad  %9  %170
OpLine %3 87 14
OpLine %3 87 14
%172 = OpLoad  %6  %150
OpLine %3 87 14
%173 = OpAccessChain  %110  %142 %48 %48 %172 %44
%174 = OpLoad  %9  %173
OpLine %3 88 14
OpLine %3 88 14
%175 = OpLoad  %6  %150
%176 = OpLoad  %6  %150
%177 = OpAccessChain  %110  %142 %48 %48 %175 %176
%178 = OpLoad  %9  %177
OpLine %3 90 13
OpLine %3 92 5
%179 = OpLoad  %6  %150
%180 = OpIAdd  %6  %179 %70
OpLine %3 92 5
OpStore %150 %180
OpLine %3 95 5
OpLine %3 95 5
%182 = OpAccessChain  %181  %151 %48
OpStore %182 %143
OpLine %3 96 5
OpLine %3 96 5
OpLine %3 96 27
OpLine %3 96 43
OpLine %3 96 59
OpLine %3 96 15
OpLine %3 96 5
%184 = OpAccessChain  %183  %151 %48 %48
OpStore %184 %149
OpLine %3 97 5
OpLine %3 97 5
OpLine %3 97 5
OpLine %3 97 18
OpLine %3 97 5
%185 = OpAccessChain  %127  %151 %48 %48 %48
OpStore %185 %87
OpLine %3 98 5
OpLine %3 98 5
%186 = OpLoad  %6  %150
OpLine %3 98 20
OpLine %3 98 5
%187 = OpAccessChain  %127  %151 %48 %48 %186
OpStore %187 %89
OpLine %3 99 5
OpLine %3 99 5
OpLine %3 99 5
OpLine %3 99 5
OpLine %3 99 5
%188 = OpAccessChain  %28  %151 %48 %48 %48 %44
OpStore %188 %90
OpLine %3 100 5
OpLine %3 100 5
OpLine %3 100 5
%189 = OpLoad  %6  %150
OpLine %3 100 5
%190 = OpAccessChain  %28  %151 %48 %48 %48 %189
OpStore %190 %91
OpLine %3 101 5
OpLine %3 101 5
%191 = OpLoad  %6  %150
OpLine %3 101 5
OpLine %3 101 5
%192 = OpAccessChain  %28  %151 %48 %48 %191 %44
OpStore %192 %92
OpLine %3 102 5
OpLine %3 102 5
%193 = OpLoad  %6  %150
%194 = OpLoad  %6  %150
OpLine %3 102 5
%195 = OpAccessChain  %28  %151 %48 %48 %193 %194
OpStore %195 %93
OpReturn
OpFunctionEnd
%198 = OpFunction  %9  None %199
%197 = OpFunctionParameter  %28
%196 = OpLabel
OpBranch %200
%200 = OpLabel
OpLine %3 105 22
%201 = OpLoad  %9  %197
OpReturnValue %201
OpFunctionEnd
%204 = OpFunction  %9  None %205
%203 = OpFunctionParameter  %30
%202 = OpLabel
OpBranch %206
%206 = OpLabel
OpLine %3 110 12
%207 = OpCompositeExtract  %29  %203 4
OpLine %3 110 12
%208 = OpCompositeExtract  %9  %207 9
OpReturnValue %208
OpFunctionEnd
%211 = OpFunction  %2  None %212
%210 = OpFunctionParameter  %34
%209 = OpLabel
OpBranch %214
%214 = OpLabel
OpLine %3 159 5
OpStore %210 %213
OpReturn
OpFunctionEnd
%217 = OpFunction  %2  None %218
%216 = OpFunctionParameter  %36
%215 = OpLabel
OpBranch %222
%222 = OpLabel
OpLine %3 163 32
OpLine %3 163 43
OpLine %3 163 32
OpLine %3 163 12
OpLine %3 163 5
OpStore %216 %221
OpReturn
OpFunctionEnd
%224 = OpFunction  %2  None %67
%223 = OpLabel
%229 = OpVariable  %34  Function %225
%230 = OpVariable  %36  Function %228
OpBranch %231
%231 = OpLabel
OpLine %3 168 5
%232 = OpFunctionCall  %2  %211 %229
OpLine %3 170 35
OpLine %3 170 46
OpLine %3 170 35
OpLine %3 170 15
OpLine %3 171 5
%233 = OpFunctionCall  %2  %217 %230
OpReturn
OpFunctionEnd
%236 = OpFunction  %4  None %237
%235 = OpFunctionParameter  %38
%234 = OpLabel
OpBranch %238
%238 = OpLabel
OpLine %3 179 10
%239 = OpAccessChain  %34  %235 %48
%240 = OpLoad  %4  %239
OpReturnValue %240
OpFunctionEnd
%243 = OpFunction  %2  None %244
%242 = OpFunctionParameter  %38
%241 = OpLabel
OpBranch %245
%245 = OpLabel
OpLine %3 183 3
OpLine %3 183 3
%246 = OpAccessChain  %34  %242 %48
OpStore %246 %17
OpReturn
OpFunctionEnd
%249 = OpFunction  %4  None %250
%248 = OpFunctionParameter  %41
%247 = OpLabel
OpBranch %251
%251 = OpLabel
OpLine %3 187 10
%252 = OpAccessChain  %34  %248 %44
%253 = OpLoad  %4  %252
OpReturnValue %253
OpFunctionEnd
%256 = OpFunction  %2  None %257
%255 = OpFunctionParameter  %41
%254 = OpLabel
OpBranch %258
%258 = OpLabel
OpLine %3 191 3
OpLine %3 191 3
%259 = OpAccessChain  %34  %255 %44
OpStore %259 %17
OpReturn
OpFunctionEnd
%261 = OpFunction  %2  None %67
%260 = OpLabel
%262 = OpVariable  %38  Function %263
%264 = OpVariable  %41  Function %265
OpBranch %266
%266 = OpLabel
OpLine %3 196 4
%267 = OpFunctionCall  %2  %243 %262
OpLine %3 197 4
%268 = OpFunctionCall  %4  %236 %262
OpLine %3 200 4
%269 = OpFunctionCall  %2  %256 %264
OpLine %3 201 4
%270 = OpFunctionCall  %4  %249 %264
OpReturn
OpFunctionEnd
%273 = OpFunction  %42  None %274
%272 = OpFunctionParameter  %42
%271 = OpLabel
%275 = OpVariable  %276  Function %277
OpBranch %278
%278 = OpLabel
OpLine %3 205 13
%279 = OpCompositeConstruct  %43  %272
OpLine %3 205 5
OpStore %275 %279
OpLine %3 207 12
%281 = OpAccessChain  %280  %275 %48
%282 = OpLoad  %42  %281
OpReturnValue %282
OpFunctionEnd
%284 = OpFunction  %6  None %285
%283 = OpLabel
%288 = OpVariable  %289  Function %287
OpBranch %290
%290 = OpLabel
OpLine %3 213 16
OpLine %3 215 12
%291 = OpAccessChain  %95  %288 %48
%292 = OpLoad  %6  %291
OpReturnValue %292
OpFunctionEnd
%294 = OpFunction  %6  None %285
%293 = OpLabel
OpBranch %296
%296 = OpLabel
OpLine %3 225 17
%297 = OpCompositeExtract  %46  %295 0
OpLine %3 226 20
%298 = OpCompositeExtract  %6  %297 0
OpLine %3 228 9
%299 = OpCompositeExtract  %4  %295 1
%300 = OpBitcast  %4  %298
%301 = OpINotEqual  %42  %299 %300
OpLine %3 228 5
OpLine %3 232 12
%302 = OpCompositeExtract  %46  %295 0
%303 = OpCompositeExtract  %6  %302 0
OpReturnValue %303
OpFunctionEnd
%305 = OpFunction  %6  None %285
%304 = OpLabel
%306 = OpVariable  %307  Function %295
%308 = OpVariable  %309  Function %310
%311 = OpVariable  %95  Function %312
OpBranch %313
%313 = OpLabel
OpLine %3 238 17
%314 = OpAccessChain  %309  %306 %48
%315 = OpLoad  %46  %314
OpLine %3 238 5
OpStore %308 %315
OpLine %3 239 20
%316 = OpAccessChain  %95  %308 %48
%317 = OpLoad  %6  %316
OpLine %3 239 5
OpStore %311 %317
OpLine %3 241 9
%318 = OpAccessChain  %34  %306 %44
%319 = OpLoad  %4  %318
%320 = OpLoad  %6  %311
%321 = OpBitcast  %4  %320
%322 = OpINotEqual  %42  %319 %321
OpLine %3 241 5
OpLine %3 245 12
%323 = OpAccessChain  %95  %306 %48 %48
%324 = OpLoad  %6  %323
OpReturnValue %324
OpFunctionEnd
%331 = OpFunction  %2  None %67
%325 = OpLabel
%342 = OpVariable  %28  Function %336
%343 = OpVariable  %344  Function %345
%328 = OpLoad  %4  %326
%332 = OpAccessChain  %68  %56 %48
%334 = OpAccessChain  %333  %59 %48
%335 = OpAccessChain  %141  %62 %48
OpBranch %346
%346 = OpLabel
OpLine %3 1 1
%347 = OpLoad  %9  %342
OpLine %3 118 5
OpStore %342 %71
OpLine %3 120 9
%348 = OpLoad  %7  %52
OpLine %3 121 5
%349 = OpFunctionCall  %2  %66
OpLine %3 122 5
%350 = OpFunctionCall  %2  %140
OpLine %3 125 19
%352 = OpAccessChain  %351  %54 %48
%353 = OpLoad  %10  %352
OpLine %3 126 15
%355 = OpAccessChain  %354  %54 %40
%356 = OpLoad  %19  %355
OpLine %3 128 13
%359 = OpAccessChain  %358  %54 %48 %337 %48
%360 = OpLoad  %9  %359
OpLine %3 129 13
OpLine %3 129 22
%362 = OpArrayLength  %4  %54 5
OpLine %3 129 13
%363 = OpISub  %4  %362 %15
%366 = OpAccessChain  %365  %54 %31 %363 %48
%367 = OpLoad  %6  %366
OpLine %3 130 13
%368 = OpLoad  %24  %334
OpLine %3 133 56
OpLine %3 133 56
OpLine %3 134 21
%369 = OpFunctionCall  %9  %198 %342
OpLine %3 137 31
%372 = OpExtInst  %9  %1 FClamp %360 %370 %371
%373 = OpConvertFToS  %6  %372
OpLine %3 137 14
%374 = OpCompositeConstruct  %33  %367 %373 %338 %339 %340
OpLine %3 137 5
OpStore %343 %374
OpLine %3 138 5
%375 = OpIAdd  %4  %328 %44
OpLine %3 138 5
%376 = OpAccessChain  %95  %343 %375
OpStore %376 %286
OpLine %3 139 17
%377 = OpAccessChain  %95  %343 %328
%378 = OpLoad  %6  %377
OpLine %3 141 5
%379 = OpFunctionCall  %9  %204 %341
OpLine %3 143 22
%381 = OpCompositeConstruct  %380  %378 %378 %378 %378
%382 = OpConvertSToF  %32  %381
%383 = OpMatrixTimesVector  %11  %353 %382
OpLine %3 143 12
%384 = OpCompositeConstruct  %32  %383 %73
OpStore %329 %384
OpReturn
OpFunctionEnd
%387 = OpFunction  %2  None %67
%385 = OpLabel
%388 = OpAccessChain  %333  %59 %48
OpBranch %399
%399 = OpLabel
OpLine %3 149 5
OpLine %3 149 5
OpLine %3 149 5
%400 = OpAccessChain  %358  %54 %48 %44 %15
OpStore %400 %71
OpLine %3 150 5
OpLine %3 150 31
OpLine %3 150 47
OpLine %3 150 63
OpLine %3 150 19
OpLine %3 150 5
%401 = OpAccessChain  %351  %54 %48
OpStore %401 %393
OpLine %3 151 5
OpLine %3 151 35
OpLine %3 151 15
OpLine %3 151 5
%402 = OpAccessChain  %354  %54 %40
OpStore %402 %396
OpLine %3 152 5
OpLine %3 152 5
OpLine %3 152 5
%403 = OpAccessChain  %365  %54 %31 %44 %48
OpStore %403 %70
OpLine %3 153 5
OpStore %388 %397
OpLine %3 155 12
OpStore %386 %398
OpReturn
OpFunctionEnd
%405 = OpFunction  %2  None %67
%404 = OpLabel
OpBranch %407
%407 = OpLabel
OpLine %3 250 5
%408 = OpFunctionCall  %2  %224
OpLine %3 251 5
%409 = OpFunctionCall  %2  %261
OpLine %3 252 5
%410 = OpFunctionCall  %42  %273 %406
OpLine %3 253 5
%411 = OpFunctionCall  %6  %284
OpLine %3 254 5
%412 = OpFunctionCall  %6  %294
OpLine %3 255 5
%413 = OpFunctionCall  %6  %305
OpReturn
OpFunctionEnd